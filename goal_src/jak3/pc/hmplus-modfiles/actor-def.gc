(in-package goal)

;name: actor-def.gc

#|
(defbehavior dp-bipedal-init-by-other dp-bipedal ((vec vector))
  (init-enemy-collision! self)
  (logior! (-> self mask) (process-mask actor-pause))
  (vector-copy! (-> self root trans) vec)
  (quaternion-identity! (-> self root quat))
  (vector-identity! (-> self root scale))
  (init-enemy! self)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      (let ((nav (find-nearest-nav-mesh vec 0.0)) ;; try to find a nav mesh in the vicinity
        ;; verts for the path
        (cverts (new 'static 'inline-array vector 3
                (static-vectorm 1 0 0)
                (static-vectorm 0 1 0)
                (static-vectorm 0 0 1)
                )
          )
        )
    ;; if a nav mesh is close by, use that, otherwise use default
    (if nav
      (change-to nav self)
      (change-to *default-nav-mesh* self)
      )
    ;; allocate path
    (set! (-> self path) (new 'process 'path-control self 'path 0.0 (the entity #f) #f))
    (set! (-> self path curve cverts) cverts)
    (set! (-> self path curve num-cverts) 3)
    )
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (set! (-> self hit-points) (+ (-> self enemy-info default-hit-points) 35.0))
  (go-idle self)
  )|#
#|
  (define extra-offthetop 0.0)
    (define draw-levelup-noto #f)
    (define lvli 0)
    (define *xp-gain* 0.0)
    (define xp-draw #t)
    (define xpi 0)
    (define enemy-noto 0)
    (define start-was-uprising #f)
    (define wasi 0)

  (define matt-str (new 'global 'string 2048 (the-as string #f)))
  (define *pc-encoded-matt-str* (new 'global 'string 2048 (the-as string #f)))

  (define notoriety-level 0)
  (define melee-level 0)
  (define guns-level 0)
  (define eco-level 0)

  (define in-debug? #t)

  (define bm-string "")
  (define gm-string "")
  (define sq-string "")
  (define max-modg 5)
  (define max-modb 3)
  (define uni-count1 #f)
  (define uni 0)
  (define in-modifiers? #f)
  (define in-gunmods? #f)
  (define in-superpowers? #f)
  (define in-skill? #f)
  (define on-vehicle? #f)

  (define menu-slot 0)
  (define menu-type 0)
  (define menu-select 0)

  (define in-menu? #f)

  (define has-boost-tap? #f)
  (define has-fast-attacks? #f)
  (define has-luck-stat? #f)
  (define has-triple-jump? #f)
  (define has-flight-boost? #f)
  (define has-enemy-hp? #f)
  (define has-ambush? #f)
  (define has-more-enemies? #f)
  (define camera-locked? #f)
  |#


(defenum artifact-type
  :type uint8
  (artifact-a)
  (artifact-b)
  (artifact-c)
  (artifact-d)
  )

(deftype artifact-info (structure)
  ((pos            vector  :inline)
   (time           uint32)
   (artifact-type  artifact-type)
   )
  )

(defskelgroup skel-was-artifact was-artifact was-artifact-lod0-jg was-artifact-idle-ja
              ((was-artifact-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-pre-artifact-a pre-artifact-a pre-artifact-a-lod0-jg pre-artifact-a-idle-ja
              ((pre-artifact-a-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-pre-artifact-b pre-artifact-b pre-artifact-b-lod0-jg pre-artifact-b-idle-ja
              ((pre-artifact-b-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-pre-artifact-c pre-artifact-c pre-artifact-c-lod0-jg pre-artifact-c-idle-ja
              ((pre-artifact-c-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-pre-artifact-d pre-artifact-d pre-artifact-d-lod0-jg pre-artifact-d-idle-ja
              ((pre-artifact-d-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-gauntlets gauntlets gauntlets-lod0-jg gauntlets-idle-ja
              ((gauntlets-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(deftype was-artifact (process-drawable)
  ((root  collide-shape :override)
   (pos   vector         :inline)
   (angs  vector         :inline)
   )
  (:state-methods
    idle
    sink
    die
    )
  (:methods
    (find-ground (_type_) symbol)
    (check-pickup (_type_) none)
    (rotate (_type_) none)
    )
  )


(defmethod find-ground ((this was-artifact))
  (let ((s4-0 #f))
    (let ((gp-0 (new 'stack-no-clear 'cquery-with-vec)))
      (set! (-> gp-0 vec0 quad) (-> this root trans quad))
      (set! (-> gp-0 cquery start-pos quad) (-> gp-0 vec0 quad))
      (+! (-> gp-0 cquery start-pos y) 40960.0)
      (vector-reset! (-> gp-0 vec1))
      (set! (-> gp-0 vec1 y) 1.0)
      (set-vector! (-> gp-0 cquery move-dist) 0.0 -81920.0 0.0 1.0)
      (let ((v1-6 (-> gp-0 cquery)))
        (set! (-> v1-6 radius) 1024.0)
        (set! (-> v1-6 collide-with) (collide-spec backgnd))
        (set! (-> v1-6 ignore-process0) #f)
        (set! (-> v1-6 ignore-process1) #f)
        (set! (-> v1-6 ignore-pat)
              (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
              )
        (set! (-> v1-6 action-mask) (collide-action solid))
        )
      (let ((f0-8 (fill-and-probe-using-line-sphere *collide-cache* (-> gp-0 cquery))))
        (when (>= f0-8 0.0)
          (vector+float*! (-> gp-0 vec0) (-> gp-0 cquery start-pos) (-> gp-0 cquery move-dist) f0-8)
          (set! (-> gp-0 vec1 quad) (-> gp-0 cquery best-other-tri normal quad))
          (set! s4-0 #t)
          (format #t "was-artifact::find-ground: ground y ~M~%" (-> gp-0 vec0 y))
          )
        )
      (set! (-> this root trans quad) (-> gp-0 vec0 quad))
      (forward-up-nopitch->quaternion (-> this root quat) (new 'static 'vector :z 1.0 :w 1.0) (-> gp-0 vec1))
      )
    s4-0
    )
  )

(defmethod check-pickup ((this was-artifact))
  (let ((v1-0 *target*)
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (when v1-0
      (set! (-> s5-0 quad) (-> v1-0 control trans quad))
      (set! (-> s5-0 w) 4096.0)
      (when (focus-test? v1-0 pilot)
        (let ((a1-4 (handle->process (-> v1-0 pilot vehicle))))
          (set! (-> s5-0 quad)
                (-> (the-as collide-shape (-> (the-as process-drawable a1-4) root)) root-prim prim-core world-sphere quad)
                )
          )
        )
      (let ((f0-1 (vector-vector-xz-distance-squared (-> this root trans) s5-0))
            (f1-2 (fabs (- (-> s5-0 y) (-> this root trans y))))
            (f2-2 (+ 8192.0 (-> s5-0 w)))
            )
        (when (and (>= (* f2-2 f2-2) f0-1) (< f1-2 32768.0))
          (sound-play "artifact-pickup")
          (+! (-> *game-info* counter) -1.0)
          (when (= desert-spawn-mission-oasis #t)
            (task-node-close! (game-task-node desert-spawn-task-oasis-goto-artifact) #t)
          )
          (when (= desert-spawn-mission-deserta #t)
            (task-node-close! (game-task-node desert-spawn-task-deserta-goto-artifact) #t)
          )
          (when (= desert-spawn-mission-brute #t)
            (boss-brute! (-> this root trans))
            (set! in-satbattle? #t)
          )
          (go (method-of-object this die))
          )
        )
      )
    )
  0
  (none)
  )

(defmethod rotate ((this was-artifact))
  (let ((gp-0 (new 'stack-no-clear 'matrix)))
    (set! (-> gp-0 fvec x) (seconds-per-frame))
    (+! (-> this angs x) (* 32768.0 (-> gp-0 fvec x)))
    (+! (-> this angs y) (* 23665.777 (-> gp-0 fvec x)))
    (+! (-> this angs z) (* 20024.889 (-> gp-0 fvec x)))
    (+! (-> this angs w) (* 22755.555 (-> gp-0 fvec x)))
    (dotimes (v1-5 4)
      (if (< 32768.0 (-> this angs data v1-5))
          (+! (-> this angs data v1-5) -65536.0)
          )
      (if (< (-> this angs data v1-5) -32768.0)
          (+! (-> this angs data v1-5) 65536.0)
          )
      )
    (vector-reset! (-> gp-0 rvec))
    (set! (-> gp-0 rvec y) (+ 4915.2 (* 2048.0 (sin (-> this angs x)))))
    (set! (-> gp-0 rvec x) (* 1024.0 (sin (-> this angs y))))
    (set! (-> gp-0 rvec z) (* 1024.0 (cos (-> this angs y))))
    (vector+! (-> this root trans) (-> this pos) (-> gp-0 rvec))
    (vector-reset! (-> gp-0 uvec))
    (set! (-> gp-0 uvec z) (* 5461.3335 (sin (-> this angs z))))
    (set! (-> gp-0 uvec y) (-> this angs w))
    (quaternion-zxy! (-> this root quat) (-> gp-0 uvec))
    )
  (ja-post)
  0
  (none)
  )

(defstate idle (was-artifact)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('sink)
       (go-virtual sink)
       )
      )
    )
  :trans (behavior ()
    (check-pickup self)
    )
  :code (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'task-arrow-params)))
      (let ((v1-0 (new 'stack-no-clear 'vector)))
        (set! (-> v1-0 quad) (-> self root trans quad))
        (set! (-> gp-0 pos quad) (-> v1-0 quad))
        )
      (quaternion-identity! (-> gp-0 quat))
      (set! (-> gp-0 flags) (task-arrow-flags))
      (add-icon! *minimap* self (the-as uint 13) (the-as int #f) (the-as vector #t) 0)
      )
    (until #f
      (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!))
        )
      )
    #f
    )
  :post (behavior ()
    (rotate self)
    )
  )

(defstate sink (was-artifact)
  :virtual #t
  :trans (behavior ()
    (check-pickup self)
    (+! (-> self pos y) (* -1024.0 (seconds-per-frame)))
    )
  :code (behavior ()
    (cond
      ((logtest? (-> *part-group-id-table* 333 flags) (sp-group-flag sp13))
       (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
       (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 333))
       )
      (else
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 333))
        )
      )
    (set-time! (-> self state-time))
    (until #f
      (suspend)
      )
    #f
    )
  :post (behavior ()
    (rotate self)
    )
  )

(defstate die (was-artifact)
  :virtual #t
  :code (behavior ()
    (cleanup-for-death self)
    )
  )

  (defbehavior was-artifact-init-by-other was-artifact ((arg0 artifact-info))
  (when (task-node-open? (game-task-node desert-artifact-race-1-race))
    (set! (-> self level) (level-get *level* 'desrace1))
  )
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-8 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec obstacle))
      (set! (-> v1-8 transform-index) 0)
      (set-vector! (-> v1-8 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-10 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-10 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-10 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (let ((v1-13 (-> self root root-prim)))
    (set! (-> v1-13 prim-core collide-as) (collide-spec))
    (set! (-> v1-13 prim-core collide-with) (collide-spec))
    )
  0
  (set! (-> self root trans quad) (-> arg0 pos quad))
  (set! *spawn-vec* (-> self root trans))
  (quaternion-identity! (-> self root quat))
  (set-vector! (-> self root scale) 3.0 3.0 3.0 1.0)
  (find-ground self)
  (set! (-> self pos quad) (-> self root trans quad))
  (let* ((v1-23 (-> arg0 artifact-type))
         (a1-6 (cond
                 ((= v1-23 (artifact-type artifact-a))
                  (art-group-get-by-name *level* "skel-pre-artifact-a" (the-as (pointer level) #f))
                  )
                 ((= v1-23 (artifact-type artifact-b))
                  (art-group-get-by-name *level* "skel-pre-artifact-b" (the-as (pointer level) #f))
                  )
                 ((= v1-23 (artifact-type artifact-c))
                  (art-group-get-by-name *level* "skel-pre-artifact-c" (the-as (pointer level) #f))
                  )
                 ((= v1-23 (artifact-type artifact-d))
                  (art-group-get-by-name *level* "skel-pre-artifact-d" (the-as (pointer level) #f))
                  )
                 (else
                   (art-group-get-by-name *level* "skel-gauntlets" (the-as (pointer level) #f))
                   )
                 )
               )
         )
    (initialize-skeleton self (the-as skeleton-group a1-6) (the-as pair 0))
    )
  (if (-> self draw shadow)
      (set! (-> self draw shadow-ctrl) (new
                                         'process
                                         'shadow-control
                                         -12288.0
                                         12288.0
                                         614400.0
                                         (the-as vector #f)
                                         (shadow-flags shdf00 shdf04)
                                         245760.0
                                         )
            )
      )
  (let ((a0-31 (find-nearest-nav-mesh (-> self pos) (the-as float #x7f800000))))
    (if a0-31
        (add-process-drawable-to-nav-mesh a0-31 self #f)
        )
    )
  (go-virtual idle)
  )

  ;; WARN: Return type mismatch process vs was-artifact.
(defun was-artifact-spawn ((arg0 process) (arg1 artifact-info))
  (let ((gp-0 (the-as process #f)))
    (let ((v1-1 (process-spawn was-artifact arg1 :name "was-artifact" :to arg0)))
      (if v1-1
          (set! gp-0 (-> v1-1 0))
          )
      )
    (the-as was-artifact gp-0)
    )
  )

  (defun spawn-artifact ((vec vector))
    (let ((gp-0 (new 'static 'artifact-info)))
        (set! (-> gp-0 pos quad) (-> vec quad))
        (set! (-> gp-0 time) (seconds 0.0))
        (let ((rnd (rand-vu-int-range 1 4)))
                (when (= rnd 1)
                    (set! (-> gp-0 artifact-type) (artifact-type artifact-a))
                )
                (when (= rnd 2)
                    (set! (-> gp-0 artifact-type) (artifact-type artifact-b))
                )
                (when (= rnd 3)
                    (set! (-> gp-0 artifact-type) (artifact-type artifact-c))
                )
                (when (= rnd 4)
                    (set! (-> gp-0 artifact-type) (artifact-type artifact-d))
                )
            )
        (process-spawn was-artifact gp-0 :name "was-artifact" :from *default-dead-pool* :stack-size #x18000)
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-extern *range-ftexplo-dust-color* curve-color-fast)
(define-extern *range-ftexplo-dust-alpha* curve2d-fast)
(define-extern *range-ftexplo-dust-scale-x* curve2d-fast)
(define-extern *range-ftexplo-dust-scale-y* curve2d-fast)
(define-extern *curve-ftexplo-dust-alpha* curve2d-fast)
(define-extern *curve-ftexplo-dust-scale-x* curve2d-fast)
(define-extern *curve-ftexplo-dust-scale-y* curve2d-fast)
(define-extern *range-ftexplo-color* curve-color-fast)
(define-extern *range-ftexplo-alpha* curve2d-fast)
(define-extern *range-ftexplo-scale-x* curve2d-fast)
(define-extern *range-ftexplo-scale-y* curve2d-fast)
(define-extern *curve-ftexplo-alpha* curve2d-fast)
(define-extern *curve-ftexplo-scale-x* curve2d-fast)
(define-extern *curve-ftexplo-scale-y* curve2d-fast)
(define-extern *v-catapult-shot-impact-blur* curve2d-piecewise)

(defpartgroup group-catapult-embers-fire
  :id 454
  :flags (sp0 sp1 sp4)
  :bounds (static-bspherem 0 0 0 1000)
  :parts ((sp-item 1806 :fade-after (meters 10000) :falloff-to (meters 10000) :flags (sp7)))
  )

(defpart 1806
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0)
    (:x (meters -0.25) (meters 0.25))
    (:y (meters -0.25))
    (:z (meters -0.25) (meters 0.25))
    (:scale-x (meters 2) (meters 0.5))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 40.0)
    (:b -64.0 4.0 32.0)
    (:a 128.0 128.0)
    (:scalevel-x (meters -0.02))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.21333334 -0.21333334)
    (:accel-y (meters 0.0016666667) (meters 0.0016666667))
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    (:rotate-y (degrees 0))
    )
  )

(deftype v-catapult-shot-embers (metalhead-grenade-shot)
  ((ptracker-proc  handle)
   )
  )


(defstate impact (v-catapult-shot-embers)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touch 'touched)
       (let ((v1-3 (-> self root root-prim)))
         (set! (-> v1-3 prim-core collide-as) (collide-spec))
         (set! (-> v1-3 prim-core collide-with) (collide-spec))
         )
       0
       (send-event (handle->process (-> self ptracker-proc)) 'draw #f)
       (projectile-event-handler proc argc message block)
       )
      (else
        (projectile-event-handler proc argc message block)
        )
      )
    )
  :code (behavior ()
    (suspend)
    (suspend-for (seconds 3) (let ((a1-0 (new 'stack-no-clear 'overlaps-others-params)))
                               (set! (-> a1-0 options) (overlaps-others-options))
                               (set! (-> a1-0 collide-with-filter) (the-as collide-spec -1))
                               (set! (-> a1-0 tlist) *touching-list*)
                               (find-overlapping-shapes (-> self root) a1-0)
                               )
                 )
    (let ((v1-10 (-> self root root-prim)))
      (set! (-> v1-10 prim-core collide-as) (collide-spec))
      (set! (-> v1-10 prim-core collide-with) (collide-spec))
      )
    0
    (while (-> self child)
      (suspend)
      )
    (deactivate self)
    )
  )

(defmethod projectile-method-25 ((this v-catapult-shot-embers))
  (if (nonzero? (-> this part))
      (spawn (-> this part) (-> this root trans))
      )
  0
  (none)
  )

(defmethod projectile-method-26 ((this v-catapult-shot-embers))
  (set! (-> this ptracker-proc)
        (process->handle
          (-> (cond
                ((logtest? (-> *part-group-id-table* 454 flags) (sp-group-flag sp13))
                 (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                 (part-tracker-spawn
                   part-tracker-subsampler
                   :to this
                   :group (-> *part-group-id-table* 454)
                   :duration (seconds 3)
                   )
                 )
                (else
                  (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                  (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 454) :duration (seconds 3))
                  )
                )
              0
              )
          )
        )
  0
  (none)
  )

(defmethod projectile-method-40 ((this v-catapult-shot-embers))
  512
  )

;; WARN: Return type mismatch symbol vs none.
(defmethod init-proj-settings! ((this v-catapult-shot-embers))
  (set! (-> this attack-mode) 'eco-yellow)
  (set! (-> this blast-radius) 4096.0)
  (set! (-> this max-speed) 135168.0)
  (set! (-> this update-velocity) projectile-update-velocity-add-gravity)
  (set! (-> this move) gren-canister-move)
  (set! (-> this root dynam gravity y) 102400.0)
  (set! (-> this root dynam gravity-length) 102400.0)
  (set! (-> this root dynam gravity-max) 102400.0)
  (let ((f0-5 1092.2667))
    (quaternion-axis-angle! (-> this tumble-quat) 1.0 0.0 0.0 f0-5)
    )
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 454) this))
  (set! (-> this ptracker-proc) (the-as handle #f))
  (none)
  )

(defpartgroup group-catapult-target-glow
  :id 455
  :flags (sp0 sp4)
  :bounds (static-bspherem 0 0 0 20)
  :parts ((sp-item 1807 :flags (sp6 sp7)))
  )

(defpart 1807
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y (meters 20))
    (:r 128.0)
    (:g 40.0)
    (:b 0.0)
    (:a 0.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    (:rotate-y (degrees 0))
    )
  )

(defpartgroup group-catapult-target-scorched-earth
  :id 456
  :flags (sp0 sp1)
  :bounds (static-bspherem 0 0 0 640)
  :parts ((sp-item 1808 :flags (is-3d sp3 sp7)))
  )

(defpart 1808
  :init-specs ((:texture (dirtpuff01 level-default-sprite))
    (:num 16.0)
    (:y (meters 0.1))
    (:z (meters 8))
    (:scale-x (meters 1) (meters 2))
    (:scale-y (meters 5) (meters 5))
    (:r 0.0)
    (:g 0.0)
    (:b 0.0)
    (:a 0.0)
    (:fade-a 0.85333335 0.85333335)
    (:timer (seconds 3))
    (:flags (left-multiply-quat))
    (:next-time (seconds 0.25))
    (:next-launcher 1809)
    (:rotate-y (degrees 0) (degrees 36000))
    )
  )

(defpart 1809
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.75)) (:next-launcher 1810))
  )

(defpart 1810
  :init-specs ((:fade-a -0.21333334))
  )

(deftype catapult-target (process-drawable)
  ((alpha  float)
   )
  (:state-methods
    idle
    )
  (:methods
    (catapult-target-method-21 (_type_) none)
    )
  )


(defbehavior catapult-target-handler catapult-target ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (local-vars (v0-1 object))
  (case arg2
    (('update)
     (let ((f0-1 (- (-> (the-as vector (-> arg3 param 0)) y) (-> self root trans y))))
       (set! (-> self alpha) (lerp-scale 128.0 0.0 f0-1 0.0 614400.0))
       )
     0
     )
    (('on)
     (set! v0-1 (logclear (-> self draw status) (draw-control-status no-draw)))
     (set! (-> self draw status) (the-as draw-control-status v0-1))
     v0-1
     )
    (('off)
     (set! v0-1 (logior (-> self draw status) (draw-control-status no-draw)))
     (set! (-> self draw status) (the-as draw-control-status v0-1))
     v0-1
     )
    (('die)
     (activate! *camera-smush-control* 2048.0 30 150 1.0 0.8 (-> *display* camera-clock))
     (cond
       ((logtest? (-> *part-group-id-table* 456 flags) (sp-group-flag sp13))
        (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
        (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 456))
        )
       (else
         (set! (-> *launch-matrix* trans quad) (-> self root trans quad))
         (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 456))
         )
       )
     (let ((gp-2 (quaternion-copy! (new 'stack-no-clear 'quaternion) (-> self root quat)))
           (s5-0 (new 'stack-no-clear 'quaternion))
           (s4-0 (new 'stack-no-clear 'vector))
           )
       (quaternion-rotate-y! gp-2 gp-2 (* 182.04445 (the float (rand-vu-int-count 90))))
       (dotimes (s3-1 4)
         (let ((s2-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
           (quaternion-rotate-y! gp-2 gp-2 16384.0)
           (quaternion-rotate-local-x! s5-0 gp-2 -12743.111)
           (vector-z-quaternion! s4-0 gp-2)
           (vector-normalize! s4-0 40960.0)
           (vector+! s4-0 s4-0 (-> self root trans))
           (set! (-> s2-1 ent) (-> self entity))
           (set! (-> s2-1 charge) 1.0)
           (set! (-> s2-1 options) (projectile-options))
           (logclear! (-> s2-1 options) (projectile-options po14 po15 po16))
           (set! (-> s2-1 pos quad)
                 (-> (vector+! (new 'stack-no-clear 'vector) (-> self root trans) (new 'static 'vector :y 4096.0 :w 1.0)) quad)
                 )
           (set! (-> s2-1 notify-handle) (the-as handle #f))
           (set! (-> s2-1 owner-handle) (the-as handle #f))
           (set! (-> s2-1 target-handle) (the-as handle #f))
           (set! (-> s2-1 target-pos quad) (the-as uint128 0))
           (set! (-> s2-1 ignore-handle) (process->handle self))
           (let* ((v1-55 *game-info*)
                  (a0-42 (+ (-> v1-55 attack-id) 1))
                  )
             (set! (-> v1-55 attack-id) a0-42)
             (set! (-> s2-1 attack-id) a0-42)
             )
           (set! (-> s2-1 timeout) (seconds 5))
           (set! (-> s2-1 damage) 1.0)
           (logior! (-> s2-1 options) (projectile-options po14))
           (vector-normalize-copy! (-> s2-1 vel) (vector-z-quaternion! s4-0 s5-0) 81920.0)
           (spawn-projectile v-catapult-shot-embers s2-1 (-> self parent 0) *default-dead-pool*)
           )
         )
       )
     (go empty-state)
     )
    )
  )

(defstate idle (catapult-target)
  :virtual #t
  :event catapult-target-handler
  :trans (behavior ()
    (catapult-target-method-21 self)
    )
  :code sleep-code
  )

;; WARN: Return type mismatch object vs none.
(defmethod catapult-target-method-21 ((this catapult-target))
  (set! (-> *part-id-table* 1807 init-specs 2 initial-valuef)
        (lerp-scale 20480.0 32768.0 (- (-> (math-camera-pos) y) (-> this root trans y)) 12288.0 49152.0)
        )
  (set! (-> *part-id-table* 1807 init-specs 8 initial-valuef) (-> this alpha))
  (spawn (-> this part) (-> this root trans))
  (none)
  )

(defbehavior catapult-target-init-by-other catapult-target ((arg0 vector))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> arg0 quad))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 455) self))
  (go-virtual idle)
  )

(deftype deschase-vehicle (structure)
  ((handle       handle)
   (wait-timer   time-frame)
   (shot-fired?  symbol)
   )
  :allow-misaligned
  )

  (defpartgroup group-v-catapult-shot-chargeup
  :id 448
  :linger-duration (seconds 0)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1783 :flags (sp6) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1784 :period (seconds 30) :length (seconds 0.017))
    )
  )

(defpart 1783
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 0.0)
    (:scalevel-x (meters 0.015555556))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 0.06666667)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 3))
    (:next-launcher 1785)
    )
  )

(defpart 1784
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 0.0)
    (:fade-a 0.14222223)
    (:timer (seconds 4))
    (:flags (sp-cpuinfo-flag-3))
    (:next-time (seconds 3))
    (:next-launcher 1785)
    )
  )

(defpart 1785
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y :copy scalevel-x) (:fade-a -0.85333335) (:flags (sp-cpuinfo-flag-2)))
  )

(defpartgroup group-v-catapult-shot-idle
  :id 449
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1786 :fade-after (meters 270) :falloff-to (meters 270) :flags (sp6))
    (sp-item 1787 :fade-after (meters 270))
    (sp-item 1788 :fade-after (meters 270))
    )
  )

(defpart 1786
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12) (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 20.0 10.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

(defpart 1787
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0)
    (:b 64.0)
    (:a 60.0 60.0)
    (:scalevel-x (meters -0.060000002))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpartgroup group-v-catapult-shot
  :id 450
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1789 :flags (sp6)) (sp-item 1790))
  )

(defpart 1789
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 12) (meters 2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 180.0)
    (:b 0.0)
    (:a 20.0 40.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    )
  )

(defpart 1790
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 1.2))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 255.0)
    (:scalevel-x (meters -0.060000002))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3))
    )
  )

(defpartgroup group-v-catapult-shot-trail
  :id 451
  :flags (sp0 sp13)
  :bounds (static-bspherem 0 0 0 4)
  :parts ((sp-item 1788))
  )

(defpart 1788
  :init-specs ((:texture (radial-gradient-yellow level-default-sprite))
    (:num 1.0)
    (:x (meters 0) (meters 2))
    (:scale-x (meters 3.2) (meters 0.8))
    (:scale-y (meters 2.4) (meters 0.4))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 32.0)
    (:scalevel-x (meters -0.0053333333) (meters -0.0053333333))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -2.6666667)
    (:fade-b -3.4)
    (:accel-y (meters -0.00033333333) (meters -0.001))
    (:friction 0.99)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 launch-along-z))
    (:next-time (seconds 0.25))
    (:next-launcher 1791)
    (:rotate-y (degrees 0) (degrees 3600))
    (:rotate-z (degrees 0) (degrees 3600))
    )
  )

(defpart 1791
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.48 -0.48))
  )

(defpartgroup group-v-catapult-shot-explosion
  :id 452
  :duration (seconds 4)
  :flags (sp0 sp5)
  :bounds (static-bspherem 0 0 0 15)
  :parts ((sp-item 1793 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1794 :period (seconds 30) :length (seconds 0.035))
    (sp-item 1795 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1796 :period (seconds 30) :length (seconds 0.035))
    (sp-item 1797 :period (seconds 30) :length (seconds 0.035))
    (sp-item 1798 :flags (sp3) :period (seconds 30) :length (seconds 0.017))
    (sp-item 1799 :period (seconds 30) :length (seconds 0.167))
    (sp-item 1800 :period (seconds 30) :length (seconds 0.5))
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1801 :flags (sp3) :binding 1792)
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    (sp-item 1792 :flags (sp2) :period (seconds 4) :length (seconds 2))
    )
  )

(defpart 1793
  :init-specs ((:texture (glow-soft level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 225))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 64.0)
    (:b 30.0)
    (:a 64.0)
    (:fade-a -0.21333334)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 40960.0)
    )
  )

(defpart 1794
  :init-specs ((:texture (hotdot level-default-sprite))
    (:num 10.0 10.0)
    (:scale-x (meters 0.8) (meters 1.2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0 20.0)
    (:a 128.0)
    (:vel-y (meters 0.16666667) (meters 0.33333334))
    (:scalevel-x (meters -0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.9)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1795
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 30.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 20.0 10.0)
    (:a 128.0)
    (:vel-y (meters 0) (meters 0.06666667))
    (:scalevel-x (meters 0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.114285715)
    (:fade-b -0.042857144)
    (:fade-a -0.36571428 -0.36571428)
    (:friction 0.93)
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1796
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 8.0 8.0)
    (:g :copy r)
    (:b :copy r)
    (:a 64.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.75)
    (:timer (seconds 1))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1797
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 30.0)
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 1.0)
    (:g 1.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.05))
    (:friction 0.97)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-13))
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-z (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-ftexplo-dust-color* (new 'static 'curve-color-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'inline-array vector 4
                                         (new 'static 'vector :x 70.0 :y 70.0 :z 70.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         (new 'static 'vector :x 40.0 :y 40.0 :z 40.0 :w 128.0)
                                         )
                                       :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *range-ftexplo-dust-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                       :ys (new 'static 'vector :x 64.0 :y 32.0 :z 33.0 :w 34.0)
                                       :one-over-x-deltas (new 'static 'vector :x -32.0 :y 1.0 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *range-ftexplo-dust-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *range-ftexplo-dust-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                         :ys (new 'static 'vector :x 8.0 :y 20.0 :z 21.0 :w 22.0)
                                         :one-over-x-deltas (new 'static 'vector :x 12.0 :y 1.0 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *curve-ftexplo-dust-alpha* (new 'static 'curve2d-fast
                                       :xs (new 'static 'vector :y -0.7 :z -1.0 :w -2.0)
                                       :ys (new 'static 'vector :y 1.0 :w 1.0)
                                       :one-over-x-deltas (new 'static 'vector :x 1.4285715 :y -3.3333333 :z 1.0 :w 1.0)
                                       )
          )
    )

(if #t
    (set! *curve-ftexplo-dust-scale-x* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                         :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                         :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                         )
          )
    )

(if #t
    (set! *curve-ftexplo-dust-scale-y* (new 'static 'curve2d-fast
                                         :xs (new 'static 'vector :y -0.5 :z -1.0 :w -2.0)
                                         :ys (new 'static 'vector :x 0.2 :y 0.8 :z 1.2 :w 2.2)
                                         :one-over-x-deltas (new 'static 'vector :x 1.2 :y 0.8000001 :z 1.0 :w 1.0)
                                         )
          )
    )

(define *part-v-catapult-shot-explosion-dust-in-curve-settings* (new 'static 'particle-curve-settings
                                                                  :lifetime-base (seconds 0.5)
                                                                  :lifetime-offset (seconds 1)
                                                                  :flags (particle-curve-flags pcf0)
                                                                  )
        )

(set! (-> *part-id-table* 1797 init-specs 14 initial-valuef)
      (the-as float *part-v-catapult-shot-explosion-dust-in-curve-settings*)
      )

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* color-start) *range-ftexplo-dust-color*)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* alpha-start) *range-ftexplo-dust-alpha*)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-x-start) *range-ftexplo-dust-scale-x*)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-y-start) *range-ftexplo-dust-scale-y*)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* r-scalar) #f)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* g-scalar) #f)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* b-scalar) #f)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* a-scalar) *curve-ftexplo-dust-alpha*)

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-x-scalar)
      *curve-ftexplo-dust-scale-x*
      )

(set! (-> *part-v-catapult-shot-explosion-dust-in-curve-settings* scale-y-scalar)
      *curve-ftexplo-dust-scale-y*
      )

(defpart 1799
  :init-specs ((:texture (explosion-edge level-default-sprite))
    (:num 5.0)
    (:scale-x (meters 3) (meters 2))
    (:rot-y (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0 20.0)
    (:b 30.0)
    (:a 128.0)
    (:vel-y (meters 0.33333334) (meters 0.13333334))
    (:scalevel-x (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.17777778)
    (:fade-b -0.06666667)
    (:fade-a -0.28444445 -0.28444445)
    (:friction 0.75)
    (:timer (seconds 1.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:func 'sparticle-2d-spline-align-instant)
    (:conerot-x (degrees 0) (degrees 360))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1800
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-curve)
    (:num 8.0)
    (:x (meters -1) (meters 2))
    (:y (meters 0) (meters 2))
    (:scale-x (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.033333335))
    (:friction 0.9)
    (:timer (seconds 1))
    (:flags ())
    (:userdata 0.0)
    (:func 'live-func-curve)
    (:conerot-x (degrees 20) (degrees 90))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(if #t
    (set! *range-ftexplo-color* (new 'static 'curve-color-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'inline-array vector 4
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    (new 'static 'vector :x 128.0 :y 128.0 :z 128.0 :w 128.0)
                                    )
                                  :one-over-x-deltas (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *range-ftexplo-alpha* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                  :ys (new 'static 'vector :x 128.0 :y 128.0 :z 129.0 :w 130.0)
                                  :one-over-x-deltas (new 'static 'vector :y 1.0 :z 1.0 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *range-ftexplo-scale-x* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 5.0 :y 7.0 :z 8.0 :w 9.0)
                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *range-ftexplo-scale-y* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -1.0 :z -2.0 :w -3.0)
                                    :ys (new 'static 'vector :x 5.0 :y 7.0 :z 8.0 :w 9.0)
                                    :one-over-x-deltas (new 'static 'vector :x 2.0 :y 1.0 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *curve-ftexplo-alpha* (new 'static 'curve2d-fast
                                  :xs (new 'static 'vector :y -0.05 :z -0.7 :w -1.0)
                                  :ys (new 'static 'vector :y 1.0 :z 0.8)
                                  :one-over-x-deltas (new 'static 'vector :x 20.0 :y -0.3076923 :z -2.6666665 :w 1.0)
                                  )
          )
    )

(if #t
    (set! *curve-ftexplo-scale-x* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                    :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                    )
          )
    )

(if #t
    (set! *curve-ftexplo-scale-y* (new 'static 'curve2d-fast
                                    :xs (new 'static 'vector :y -0.8 :z -1.0 :w -2.0)
                                    :ys (new 'static 'vector :y 1.0 :z 1.5 :w 2.5)
                                    :one-over-x-deltas (new 'static 'vector :x 1.25 :y 2.5000002 :z 1.0 :w 1.0)
                                    )
          )
    )

(define *part-v-catapult-shot-explosion-texture-curve-settings* (new 'static 'particle-curve-settings
                                                                  :lifetime-base (seconds 0.1)
                                                                  :lifetime-offset (seconds 0.6)
                                                                  :flags (particle-curve-flags pcf0)
                                                                  )
        )

(set! (-> *part-id-table* 1800 init-specs 16 initial-valuef)
      (the-as float *part-v-catapult-shot-explosion-texture-curve-settings*)
      )

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* color-start) *range-ftexplo-color*)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* alpha-start) *range-ftexplo-alpha*)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-x-start) *range-ftexplo-scale-x*)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-y-start) *range-ftexplo-scale-y*)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* r-scalar) #f)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* g-scalar) #f)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* b-scalar) #f)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* a-scalar) *curve-ftexplo-alpha*)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-x-scalar) *curve-ftexplo-scale-x*)

(set! (-> *part-v-catapult-shot-explosion-texture-curve-settings* scale-y-scalar) *curve-ftexplo-scale-y*)

(defpart 1798
  :init-specs ((:texture (starflash level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 20))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 80.0)
    (:b 40.0)
    (:a 128.0)
    (:omega (degrees 6767.9995))
    (:scalevel-x (meters -0.33333334))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.135))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

(defpart 1801
  :init-specs ((:texture (explosion-nebula level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 4) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 128.0)
    (:b 100.0)
    (:a 128.0)
    (:vel-y (meters 0.06666667) (meters 0.06666667))
    (:scalevel-x (meters -0.02) (meters -0.02))
    (:rotvel-z (degrees -300) (degrees 600))
    (:scalevel-y :copy scalevel-x)
    (:accel-y (meters -0.00066666666) (meters -0.001))
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3))
    (:conerot-x (degrees 0) (degrees 70))
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 1792
  :init-specs ((:texture (explo-texture level-default-sprite))
    (:birth-func 'birth-func-inherit-size)
    (:num 1.0)
    (:scale-x (meters 0.00024414062) (meters 0.00012207031))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 100.0)
    (:b 50.0)
    (:a 128.0)
    (:fade-r -0.85333335)
    (:fade-g -0.6666667)
    (:fade-b -0.5)
    (:fade-a -0.36571428 -0.36571428)
    (:accel-y (meters 0) (meters -0.00033333333))
    (:timer (seconds 1.167))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2))
    )
  )

(defskelgroup skel-catapult-shot-sphere gun gun-red-sphere-lod0-jg gun-red-sphere-idle-ja
              ((gun-red-sphere-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 30)
              :texture-level 10
              :sort 4
              )

(deftype catapult-shot-sphere (process-drawable)
  ((current-alpha  float)
   (pad            uint8  12)
   )
  (:state-methods
    active
    )
  )


(deftype catapult-shot-sphere-init-params (structure)
  ((pos  vector  :inline)
   )
  )


(defbehavior catapult-shot-sphere-init-by-other catapult-shot-sphere ((arg0 catapult-shot-sphere-init-params))
  (set! (-> self root) (new 'process 'trsqv))
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-catapult-shot-sphere" (the-as (pointer level) #f))
      )
    (the-as pair 0)
    )
  (set! (-> self root trans quad) (-> arg0 pos quad))
  (quaternion-identity! (-> self root quat))
  (go-virtual active)
  )

(defstate active (catapult-shot-sphere)
  :virtual #t
  :enter (behavior ()
    (set-time! (-> self state-time))
    (set-vector! (-> self root scale) 1.0 1.0 1.0 1.0)
    )
  :trans (behavior ()
    (let ((gp-0 (new 'stack-no-clear 'matrix)))
      (let* ((a2-0 (math-camera-matrix))
             (v1-0 (-> a2-0 rvec quad))
             (a0-0 (-> a2-0 uvec quad))
             (a1-0 (-> a2-0 fvec quad))
             (a2-1 (-> a2-0 trans quad))
             )
        (set! (-> gp-0 rvec quad) v1-0)
        (set! (-> gp-0 uvec quad) a0-0)
        (set! (-> gp-0 fvec quad) a1-0)
        (set! (-> gp-0 trans quad) a2-1)
        )
      (-> gp-0 fvec)
      (-> gp-0 rvec)
      (matrix->quat gp-0 (-> self root quat))
      )
    (set! (-> self current-alpha) (* 0.008333334 (the float (- (current-time) (-> self state-time)))))
    (let ((f0-3 (+ (-> self root scale x) (* 24.0 (seconds-per-frame)))))
      (set-vector! (-> self root scale) f0-3 f0-3 f0-3 1.0)
      )
    )
  :code (behavior ()
    (ja-channel-push! 1 0)
    (ja-no-eval :group! (-> self draw art-group data 77) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (ja-no-eval :group! (-> self draw art-group data 78) :num! (seek! max 5.0) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek! max 5.0))
      )
    (deactivate self)
    )
  :post ja-post
  )

(when (or (zero? *v-catapult-shot-impact-blur*) (!= loading-level global))
  (set! *v-catapult-shot-impact-blur* (new 'loading-level 'curve2d-piecewise))
  (allocate! *v-catapult-shot-impact-blur* 3 'loading-level #f)
  )

(set! (-> *v-catapult-shot-impact-blur* pts data 0 first) 0.0)

(set! (-> *v-catapult-shot-impact-blur* pts data 0 second) 0.0)

(set! (-> *v-catapult-shot-impact-blur* pts data 1 first) 0.2)

(set! (-> *v-catapult-shot-impact-blur* pts data 1 second) 1.0)

(set! (-> *v-catapult-shot-impact-blur* pts data 2 first) 1.0)

(set! (-> *v-catapult-shot-impact-blur* pts data 2 second) 0.0)

(deftype v-catapult-shot (metalhead-grenade-shot)
  ((trail-part  sparticle-launch-control)
   )
  )


(defstate impact (v-catapult-shot)
  :virtual #t
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type metalhead-grenade-shot impact) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (send-event (handle->process (-> self desired-target)) 'die)
    )
  )

(defmethod projectile-method-25 ((this v-catapult-shot))
  (if (nonzero? (-> this part))
      (spawn (-> this part) (-> this root trans))
      )
  (if (nonzero? (-> this trail-part))
      (push-back (-> this trail-part) (-> this root trans))
      )
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod projectile-method-39 ((this v-catapult-shot))
  (let ((t9-0 (method-of-type metalhead-grenade-shot projectile-method-39)))
    (t9-0 this)
    )
  (send-event (handle->process (-> this desired-target)) 'update (-> this root trans))
  (none)
  )

(defmethod projectile-method-26 ((this v-catapult-shot))
  (cond
    ((logtest? (-> *part-group-id-table* 452 flags) (sp-group-flag sp13))
     (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
     (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 452))
     )
    (else
      (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
      (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 452))
      )
    )
  0
  (none)
  )

(defmethod play-impact-sound ((this v-catapult-shot) (arg0 projectile-options))
  (case arg0
    (((projectile-options po0))
     (if (task-node-closed? (game-task-node desert-chase-marauders-get-to-stronghold))
         (sound-play "firebomb")
         (sound-play "proj-incoming")
         )
     )
    (((projectile-options po0 po1))
     (let ((f0-0 (vector-vector-distance-squared (-> this self root trans) (-> this desired-target-pos)))
           (f1-0 614400.0)
           )
       (when (< f0-0 (* f1-0 f1-0))
         (let ((a0-9 (static-sound-spec "incoming" :group 0 :volume 0.0)))
           (set! (-> a0-9 volume) 1024)
           (sound-play-by-spec a0-9 (-> this sound-id) (-> this root trans))
           )
         )
       )
     )
    )
  0
  (none)
  )

;; WARN: Return type mismatch metalhead-grenade-shot vs v-catapult-shot.
(defmethod relocate ((this v-catapult-shot) (offset int))
  (if (nonzero? (-> this trail-part))
      (&+! (-> this trail-part) offset)
      )
  (the-as v-catapult-shot ((method-of-type metalhead-grenade-shot relocate) this offset))
  )

(defmethod projectile-method-40 ((this v-catapult-shot))
  512
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod init-proj-settings! ((this v-catapult-shot))
  (with-pp
    (set! (-> this attack-mode) 'eco-yellow)
    (set! (-> this blast-radius) 20480.0)
    (set! (-> this max-speed) 135168.0)
    (set! (-> this update-velocity) projectile-update-velocity-add-gravity)
    (set! (-> this move) gren-canister-move)
    (set! (-> this root dynam gravity y) 102400.0)
    (set! (-> this root dynam gravity-length) 102400.0)
    (set! (-> this root dynam gravity-max) 102400.0)
    (let ((f0-5 1092.2667))
      (quaternion-axis-angle! (-> this tumble-quat) 1.0 0.0 0.0 f0-5)
      )
    (set! (-> this part) (create-launch-control (-> *part-group-id-table* 450) this))
    pp
    (set! (-> this trail-part)
          (the-as
            sparticle-launch-control
            (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 1788) 5.0)
            )
          )
    (set! (-> this sound-id) (new-sound-id))
    (none)
    )
  )

  (defun spawn-fireball ((arg0 vector) (arg1 vector) (arg2 float))
    (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          (v1-1 (vector-! (new 'stack-no-clear 'vector) arg0 arg1))
          )
    (let ((v1-5 (ppointer->handle (process-spawn catapult-target arg1 :name "catapult-target")))
         )
      (set! (-> gp-0 ent) (the-as entity #f))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 pos quad) (-> arg0 quad))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      ;; og:preserve-this
      (set! (-> gp-0 target-handle) 
        (if (rand-vu-percent? 0.2)
          (the-as handle #f)
          v1-5
        )
      )
      )
    (set! (-> gp-0 target-pos quad) (-> arg1 quad))
    (set! (-> gp-0 ignore-handle) (the-as handle #f))
    (let* ((v1-13 *game-info*)
           (a0-27 (+ (-> v1-13 attack-id) 1))
           )
      (set! (-> v1-13 attack-id) a0-27)
      (set! (-> gp-0 attack-id) a0-27)
      )
    (set! (-> gp-0 timeout) (seconds 10))
    (set! (-> gp-0 damage) 4.0)
    (logior! (-> gp-0 options) (projectile-options po14))
    (vector-normalize-copy! (-> gp-0 vel) v1-1 arg2)
    (spawn-projectile v-catapult-shot gp-0 *default-pool* *default-dead-pool*)
    )
  0
  (none)
)

(defun spawn-entity-fireball ((arg process-focusable) (arg0 vector) (arg1 vector) (arg2 float))
    (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          (v1-1 (vector-! (new 'stack-no-clear 'vector) arg0 arg1))
          )
    (let ((v1-5 (ppointer->handle (process-spawn catapult-target arg1 :name "catapult-target")))
         )
      (set! (-> gp-0 ent) (-> arg entity))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 pos quad) (-> arg0 quad))
      (set! (-> gp-0 notify-handle) (process->handle arg))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      ;; og:preserve-this
      (set! (-> gp-0 target-handle) 
        (if (rand-vu-percent? 0.2)
          (the-as handle #f)
          v1-5
        )
      )
      )
    (set! (-> gp-0 target-pos quad) (-> arg1 quad))
    (set! (-> gp-0 ignore-handle) (process->handle arg))
    (let* ((v1-13 *game-info*)
           (a0-27 (+ (-> v1-13 attack-id) 1))
           )
      (set! (-> v1-13 attack-id) a0-27)
      (set! (-> gp-0 attack-id) a0-27)
      )
    (set! (-> gp-0 timeout) (seconds 10))
    (set! (-> gp-0 damage) 4.0)
    (logior! (-> gp-0 options) (projectile-options po14))
    (vector-normalize-copy! (-> gp-0 vel) v1-1 arg2)
    (spawn-projectile v-catapult-shot gp-0 *default-pool* *default-dead-pool*)
    )
  0
  (none)
)

(deftype jak-catapult-shot (metalhead-grenade-shot)
  ((trail-part  sparticle-launch-control)
   )
  )

(defstate impact (jak-catapult-shot)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('touched)
       (let* ((s4-0 proc)
              (v1-1 (if (type? s4-0 process-drawable)
                        (the-as process-focusable s4-0)
                        )
                    )
              )
         (when v1-1
           (let ((s4-1 (-> v1-1 root))
                 (a1-3 (new 'stack 'collide-query))
                 )
             0.0
             (set! (-> a1-3 start-pos quad) (-> self root root-prim prim-core world-sphere quad))
             (vector-! (-> a1-3 move-dist) (the-as vector (-> s4-1 root-prim prim-core)) (-> a1-3 start-pos))
             (let ((v1-6 a1-3))
               (set! (-> v1-6 radius) 40.96)
               (set! (-> v1-6 collide-with) (collide-spec backgnd))
               (set! (-> v1-6 ignore-process0) self)
               (set! (-> v1-6 ignore-process1) (ppointer->process (-> self parent)))
               (set! (-> v1-6 ignore-pat) (-> self root pat-ignore-mask))
               (set! (-> v1-6 action-mask) (collide-action solid))
               )
             (when (< (fill-and-probe-using-line-sphere *collide-cache* a1-3) 0.0)
               (deal-damage! self proc (the-as event-message-block (-> block param 0)))
               (let ((v1-11 (-> self notify-handle)))
                 (if (handle->process v1-11)
                     (send-event (-> v1-11 process 0) 'notify 'attack proc)
                     )
                 )
               )
             )
           )
         )
       )
      )
    )
  :enter (behavior ()
    (let ((t9-0 (-> (method-of-type projectile impact) enter)))
      (if t9-0
          (t9-0)
          )
      )
    (let ((v1-5 (-> self root root-prim)))
      (set! (-> v1-5 local-sphere w) (-> self blast-radius))
      (set! (-> v1-5 prim-core world-sphere w) (-> self blast-radius))
      (set! (-> v1-5 prim-core collide-with)
            (collide-spec crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-5 prim-core collide-as) (collide-spec enemy))
      )
    (update-transforms (-> self root))
    (let ((a1-0 (new 'stack-no-clear 'overlaps-others-params)))
      (set! (-> a1-0 options) (overlaps-others-options))
      (set! (-> a1-0 collide-with-filter) (the-as collide-spec -1))
      (set! (-> a1-0 tlist) *touching-list*)
      (find-overlapping-shapes (-> self root) a1-0)
      )
    )
  :code (behavior ()
    (suspend)
    (let ((v1-1 (-> self root root-prim)))
      (set! (-> v1-1 prim-core collide-as) (collide-spec))
      (set! (-> v1-1 prim-core collide-with) (collide-spec))
      )
    0
    (while (-> self child)
      (suspend)
      )
    (deactivate self)
    )
  )


(defmethod projectile-method-25 ((this jak-catapult-shot))
  (if (nonzero? (-> this part))
      (spawn (-> this part) (-> this root trans))
      )
  (if (nonzero? (-> this trail-part))
      (push-back (-> this trail-part) (-> this root trans))
      )
  0
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod projectile-method-39 ((this jak-catapult-shot))
  (let ((t9-0 (method-of-type metalhead-grenade-shot projectile-method-39)))
    (t9-0 this)
    )
  (send-event (handle->process (-> this desired-target)) 'update (-> this root trans))
  (none)
  )

(defmethod projectile-method-26 ((this jak-catapult-shot))
  (cond
    ((logtest? (-> *part-group-id-table* 452 flags) (sp-group-flag sp13))
     (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
     (part-tracker-spawn part-tracker-subsampler :to this :group (-> *part-group-id-table* 452))
     )
    (else
      (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
      (part-tracker-spawn part-tracker :to this :group (-> *part-group-id-table* 452))
      )
    )
  0
  (none)
  )

(defmethod play-impact-sound ((this jak-catapult-shot) (arg0 projectile-options))
  (case arg0
    (((projectile-options po0))
     (if (task-node-closed? (game-task-node desert-chase-marauders-get-to-stronghold))
         (sound-play "firebomb")
         (sound-play "proj-incoming")
         )
     )
    (((projectile-options po0 po1))
     (let ((f0-0 (vector-vector-distance-squared (-> this self root trans) (-> this desired-target-pos)))
           (f1-0 614400.0)
           )
       (when (< f0-0 (* f1-0 f1-0))
         (let ((a0-9 (static-sound-spec "incoming" :group 0 :volume 0.0)))
           (set! (-> a0-9 volume) 1024)
           (sound-play-by-spec a0-9 (-> this sound-id) (-> this root trans))
           )
         )
       )
     )
    )
  0
  (none)
  )

;; WARN: Return type mismatch metalhead-grenade-shot vs v-catapult-shot.
(defmethod relocate ((this jak-catapult-shot) (offset int))
  (if (nonzero? (-> this trail-part))
      (&+! (-> this trail-part) offset)
      )
  (the-as jak-catapult-shot ((method-of-type metalhead-grenade-shot relocate) this offset))
  )

(defmethod projectile-method-40 ((this jak-catapult-shot))
  512
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod init-proj-settings! ((this jak-catapult-shot))
  (with-pp
    (set! (-> this attack-mode) 'eco-yellow)
    (set! (-> this blast-radius) 20480.0)
    (set! (-> this max-speed) 135168.0)
    (set! (-> this update-velocity) projectile-update-velocity-add-gravity)
    (set! (-> this move) gren-canister-move)
    (set! (-> this root dynam gravity y) 102400.0)
    (set! (-> this root dynam gravity-length) 102400.0)
    (set! (-> this root dynam gravity-max) 102400.0)
    (let ((f0-5 1092.2667))
      (quaternion-axis-angle! (-> this tumble-quat) 1.0 0.0 0.0 f0-5)
      )
    (set! (-> this part) (create-launch-control (-> *part-group-id-table* 450) this))
    pp
    (set! (-> this trail-part)
          (the-as
            sparticle-launch-control
            (new 'process 'sparticle-subsampler *sp-particle-system-2d* (-> *part-id-table* 1788) 5.0)
            )
          )
    (set! (-> this sound-id) (new-sound-id))
    (none)
    )
  )

  


  (defmethod setup-collision! ((this jak-catapult-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) gren-cshape-reaction-canister)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate enemy-dark-shot))
    (let ((v1-7 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-7 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-7 prim-core collide-with)
            (collide-spec backgnd crate obstacle hit-by-others-list player-list pusher)
            )
      (set! (-> v1-7 prim-core action) (collide-action solid))
      (set-vector! (-> v1-7 local-sphere) 0.0 0.0 0.0 1228.8)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-7)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-10 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-10 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (collide-spec backgnd crate vehicle-sphere hit-by-others-list pusher impenetrable-obj shield))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 2))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  (none)
  )
  

  (defun spawn-target-fireball ( (arg1 vector) (arg2 vector) (arg3 float))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          (v1-1 (vector-! (new 'stack-no-clear 'vector) arg1 arg2))
          )
    (let ((v1-5 (ppointer->handle (process-spawn catapult-target arg1 :name "catapult-target")))
         )
      (set! (-> gp-0 ent) (the-as entity #f))
      (set! (-> gp-0 charge) 1.0)
      (set! (-> gp-0 options) (projectile-options))
      (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
      (set! (-> gp-0 pos quad) (-> arg1 quad))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      ;; og:preserve-this
      (set! (-> gp-0 target-handle) (the-as handle #f))
      )
    (set! (-> gp-0 target-pos quad) (-> arg1 quad))
    (set! (-> gp-0 ignore-handle) (the-as handle #f))
    (let* ((v1-13 *game-info*)
           (a0-27 (+ (-> v1-13 attack-id) 1))
           )
      (set! (-> v1-13 attack-id) a0-27)
      (set! (-> gp-0 attack-id) a0-27)
      )
    (set! (-> gp-0 timeout) (seconds 10))
    (set! (-> gp-0 damage) (+ (* (/ (* (the float guns-level) 18.85) 3.0) 2.0) (/ notoriety-level 1.2)))
    (logior! (-> gp-0 options) (projectile-options po14))
    (vector-normalize-copy! (-> gp-0 vel) v1-1 arg3)
    (spawn-projectile jak-catapult-shot gp-0 *default-pool* *default-dead-pool*)
    )
    (none)
  )



  (defun spawn-mine-fireball ()
    (when (or
            (= (-> (level-get-target-inside *level*) name) 'minea)
            (= (-> (level-get-target-inside *level*) name) 'mineb)
            (= (-> (level-get-target-inside *level*) name) 'minec)
            (= (-> (level-get-target-inside *level*) name) 'mined)
          )
        (let ((rnd (rand-vu-int-range 1 11))
              (vec1 (new 'static 'vector
              :x (meters 296.3221) :y (meters 61.80) :z (meters -223.2583)))
              (vec2 (new 'static 'vector
              :x (meters 301.4363) :y (meters 127.0) :z (meters -209.2806)))
              (vec3 (new 'static 'vector
              :x (meters 309.1615) :y (meters 127.0) :z (meters -206.5549)))
              (vec4 (new 'static 'vector
              :x (meters 303.2791) :y (meters 127.0) :z (meters -222.1539)))
              (vec5 (new 'static 'vector
              :x (meters 309.8910) :y (meters 127.0) :z (meters -218.4249)))
              (vec6 (new 'static 'vector
              :x (meters 315.8590) :y (meters 127.0) :z (meters -224.8814)))
              (vec7 (new 'static 'vector
              :x (meters 318.7686) :y (meters 127.0) :z (meters -211.4849)))
              (vec8 (new 'static 'vector
              :x (meters 326.1320) :y (meters 127.0) :z (meters -211.3381)))
              (vec9 (new 'static 'vector
              :x (meters 320.1094) :y (meters 127.0) :z (meters -217.1919)))
              (vec10 (new 'static 'vector
              :x (meters 317.3208) :y (meters 127.0) :z (meters -219.1692)))
              (vec11 (new 'static 'vector
              :x (meters 313.8386) :y (meters 127.0) :z (meters -202.1589)))
              (veccopy (new-stack-vector0))
             )
            (when (= rnd 1)
                (set! veccopy vec1)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec1 veccopy 40.0)
            )
            (when (= rnd 2)
                (set! veccopy vec2)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec2 veccopy 40.0)
            )
            (when (= rnd 3)
                (set! veccopy vec3)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec3 veccopy 40.0)
            )
            (when (= rnd 4)
                (set! veccopy vec4)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec4 veccopy 40.0)
            )
            (when (= rnd 5)
                (set! veccopy vec5)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec5 veccopy 40.0)
            )
            (when (= rnd 6)
                (set! veccopy vec6)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec6 veccopy 40.0)
            )
            (when (= rnd 7)
                (set! veccopy vec7)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec7 veccopy 40.0)
            )
            (when (= rnd 8)
                (set! veccopy vec8)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec8 veccopy 40.0)
            )
            (when (= rnd 9)
                (set! veccopy vec9)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec9 veccopy 40.0)
            )
            (when (= rnd 10)
                (set! veccopy vec10)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec10 veccopy 40.0)
            )
            (when (= rnd 11)
                (set! veccopy vec11)
                (+! (-> veccopy y) 64.2)
                (spawn-fireball vec10 veccopy 40.0)
            )
        )
    )
    (none)
  )

  (deftype terraformer-head-laser-projectile (projectile)
  ()
  )


(defmethod setup-collision! ((this terraformer-head-laser-projectile))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-6 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-6 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-6 prim-core collide-with)
            (collide-spec backgnd jak enemy obstacle hit-by-others-list player-list)
            )
      (set! (-> v1-6 prim-core action) (collide-action solid))
      (set-vector! (-> v1-6 local-sphere) 0.0 0.0 0.0 3072.0)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! ((this terraformer-head-laser-projectile))
  (set! (-> this attack-mode) 'eco-dark)
  (set! (-> this event-hook) (-> (method-of-object this moving) event))
  ((method-of-type projectile init-proj-settings!) this)
  0
  (none)
  )

(defstate moving (terraformer-head-laser-projectile)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (at-0 int))
    (rlet ((vf0 :class vf)
           (vf1 :class vf)
           (vf2 :class vf)
           )
      (init-vf0-vector)
      (case message
        (('move)
         (let ((v1-1 (-> self root)))
           (set! (-> self starting-pos quad) (-> (the-as vector (-> block param 0)) quad))
           (set! (-> self root trans quad) (-> self starting-pos quad))
           (vector-! (-> self root transv) (the-as vector (-> block param 1)) (-> self starting-pos))
           (let ((a0-7 (-> self root transv)))
             (.lvf vf1 (&-> (-> self root transv) quad))
             (let ((f0-0 (-> self clock frames-per-second)))
               (.mov at-0 f0-0)
               )
             (.mov vf2 at-0)
             (.mov.vf vf1 vf0 :mask #b1000)
             (.mul.x.vf vf1 vf1 vf2 :mask #b111)
             (.svf (&-> a0-7 quad) vf1)
             )
           (set! (-> self pre-move-transv quad) (-> v1-1 transv quad))
           )
         (vector-normalize-copy! (-> self starting-dir) (-> self root transv) 1.0)
         (set! (-> self hits) 0)
         (set! (-> self max-hits) 100)
         ((-> self move) self)
         (let ((v0-2 (the-as object (-> block param 1))))
           (set! (-> (the-as vector v0-2) quad) (-> self root trans quad))
           v0-2
           )
         )
        (else
          (projectile-event-handler proc argc message block)
          )
        )
      )
    )
  :trans #f
  :code sleep-code
  )