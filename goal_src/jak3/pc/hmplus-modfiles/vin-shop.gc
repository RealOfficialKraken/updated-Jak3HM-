(in-package goal)

;name: vin-shop.gc

(defun draw-vin-hint ()
    (clear matt-str)
            (clear *pc-encoded-matt-str*)
            (format matt-str "<COLOR_GREEN>Triangle:<COLOR_WHITE>~%Talk to Cyber Vin"
            )
            (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
            (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
            (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
            (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (none)
)

(defun draw-vin-shop ()
    (when (!= vin-crystals (the int (-> *game-info* civilians-killed)))
        (set! vin-crystals (the int (-> *game-info* civilians-killed)))
    )
    (with-dma-buffer-add-bucket ((s2-0 (-> *display* frames (-> *display* on-screen) global-buf))
        (bucket-id particles)
        )
    (draw-sprite2d-xy s2-0 0 25 730 195 (new 'static 'rgba :a #x40) #x3fffff)
    (draw-sprite2d-xy s2-0 0 235 730 70 (new 'static 'rgba :a #x40) #x3fffff)
    )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Vin's Black Market"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 30 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.425)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Your Crystals:~%~D"
    vin-crystals
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 65 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.245)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>~%~%Dark Eco Crystals can be used here"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 30 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "~S(x25) Receive Peacemaker~%~%~S(x35) Receive Mass Inverter~%~%~S(x50) Unlock TP-FB~%~%~S(x40) Give Random Weapon~%~%~S(x15) Level Up Notoriety~%~%~%<COLOR_ORANGE>(<COLOR_BLUE>X <COLOR_ORANGE>Confirm)~%(<COLOR_RED>O <COLOR_ORANGE>Back)"
    vinw1
    vinw2
    vinw3
    vinw4
    vinw5
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 130 90 0.0 (font-color default) (font-flags kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Hint:~%~S~%~S~%~S~%~S"
    vinhs1
    vinhs2
    vinhs3
    vinhs4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 240 0.0 (font-color default) (font-flags middle kerning large))))
        (set! (-> font-ctx scale) 0.425)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (cond
        ((= vin-select 0)
            (set! vinw1 "<COLOR_GREEN>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 1)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_GREEN>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 2)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_GREEN>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 3)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_GREEN>")
            (set! vinw5 "<COLOR_WHITE>")
        )
        ((= vin-select 4)
            (set! vinw1 "<COLOR_WHITE>")
            (set! vinw2 "<COLOR_WHITE>")
            (set! vinw3 "<COLOR_WHITE>")
            (set! vinw4 "<COLOR_WHITE>")
            (set! vinw5 "<COLOR_GREEN>")
        )
    )
    (cond
        ((= vin-hinti 1)
            (set! vinhs1 "<COLOR_YELLOW>The Terraformer outside seems to be locked by")
            (set! vinhs2 "a logic gate that asks for <COLOR_GREEN>50 <COLOR_PINK>Dark Eco Crystals<COLOR_YELLOW>.")
            (set! vinhs3 "<COLOR_YELLOW>If we take it down, we could potentially")
            (set! vinhs4 "find out where the Entity is")
        )
        ((= vin-hinti 2)
            (set! vinhs1 "<COLOR_YELLOW>You can find <COLOR_PINK>Dark Eco Crystals<COLOR_YELLOW> from")
            (set! vinhs2 "breaking Tier 3 <COLOR_PINK>Dark Crates<COLOR_YELLOW> dropped by enemies")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
        ((= vin-hinti 3)
            (set! vinhs1 "<COLOR_YELLOW>You can backtrack to levels you usually can't")
            (set! vinhs2 "get back to. These areas can have replayable bosses,")
            (set! vinhs3 "more enemies, and mini bosses.")
            (set! vinhs4 "")
        )
        ((= vin-hinti 4)
            (set! vinhs1 "<COLOR_YELLOW>Certain gun mods can be obtained only by")
            (set! vinhs2 "specific enemies as drops. Mainly through slaying")
            (set! vinhs3 "enemies")
            (set! vinhs4 "")
        )
        ((= vin-hinti 5)
            (set! vinhs1 "<COLOR_YELLOW>Through this door lies <COLOR_PINK>Dark Harbingers<COLOR_YELLOW>.")
            (set! vinhs2 "They have no knockback, and throw more grenades.")
            (set! vinhs3 "A great place for farming at high levels")
            (set! vinhs4 "")
        )
        ((= vin-hinti 6)
            (set! vinhs1 "<COLOR_YELLOW>The Entity is continuing to search for more")
            (set! vinhs2 "of itself, so you might find huge dark ships")
            (set! vinhs3 "in the sky. Fight them off to get a reward")
            (set! vinhs4 "")
        )
        ((= vin-hinti 7)
            (set! vinhs1 "<COLOR_YELLOW>The Seem mission looks like it goes on")
            (set! vinhs2 "forever, but there is an end to it.")
            (set! vinhs3 "Looks like it gives a free weapon mod")
            (set! vinhs4 "")
        )
        ((= vin-hinti 8)
            (set! vinhs1 "<COLOR_YELLOW>Dropped crates will vary more tiers when")
            (set! vinhs2 "you level up Jak's <COLOR_ORANGE>Notoriety<COLOR_YELLOW>.")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
        ((= vin-hinti 9999999999)
            (set! vinhs1 "<COLOR_YELLOW>")
            (set! vinhs2 "")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
        (else
            (set! vinhs1 "None")
            (set! vinhs2 "")
            (set! vinhs3 "")
            (set! vinhs4 "")
        )
    )
    (none)
)

(defun open-vin-shop! ()
    (set! in-vin-shop? #t)
    (set! vin-select 0)
    (disable-hudmap)
    ;(+! vin-hinti 1)
    (set! vin-hinti (rand-vu-int-range 1 8))
    (none)
)

(defun close-vin-shop! ()
    (set! in-vin-shop? #f)
    (enable-hudmap)
    (camera-unlocked)
    (none)
)

(defun runs-shop! () ;runs every frame when (= weather-dark-mode #t)
    (let ((shop-rad-vec (new-stack-vector0)))
        (set-vector! shop-rad-vec (meters 2263.7312) (meters 30.7659) (meters 184.4911) 1.0)
        (when 
            (and
                (= (-> (level-get-target-inside *level*) name) 'wasdoors)
                *target*
                (not *scene-player*)
                (= (paused?) #f)
                (= in-vin-shop? #f)
                (= in-menu? #f)
                (<= (vector-vector-distance (target-pos 0) shop-rad-vec) 130000.0)
            )
            (draw-vin-hint)
            (when (cpad-pressed? 0 triangle)
                (open-vin-shop!)
            )
        )
        (when 
            (and 
                (= in-vin-shop? #t)
                *target*
                (not *scene-player*)
                (= (paused?) #f)
            )
            (draw-vin-shop)
            (let ((cam-pos (new 'static 'vector :x (meters 2265.2912) :y (meters 33.0) :z (meters 225.7977) :w 1.0))
                (tpos (new 'static 'vector :x (meters 2265.9230) :y (meters 41.4826) :z (meters 190.6130) :w 1.0))
                )
                (turn-to-scene-camera cam-pos tpos #t)
            )
            ;controls
            (when
                (and
                    (cpad-pressed? 0 down)
                    (<= vin-select 4)
                )
                (+! vin-select 1)
                (when (> vin-select 4)
                    (set! vin-select 0)
                )
            )
            (when
                (and
                    (cpad-pressed? 0 up)
                    (>= vin-select 0)
                )
                (-! vin-select 1)
                (when (< vin-select 0)
                    (set! vin-select 4)
                )
            )
            (when (cpad-pressed? 0 circle)
                (close-vin-shop!)
            )
            ;select options
            (cond 
                ((and (cpad-pressed? 0 x) (= vin-select 0) (>= vin-crystals 25) (not (logtest? (-> *game-info* features) (game-feature gun-dark-1))))
                    (-! (-> *game-info* civilians-killed) 25.0)
                    (give-weapon! "dark-1" 1)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 1) (>= vin-crystals 35) (not (logtest? (-> *game-info* features) (game-feature gun-dark-2))))
                    (-! (-> *game-info* civilians-killed) 35.0)
                    (give-weapon! "dark-2" 1)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 2) (>= vin-crystals 50)(!= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1))
                    (-! (-> *game-info* civilians-killed) 50.0)
                    (+! (-> *game-info* continue-deaths) 1000000)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 3) (>= vin-crystals 40))
                    (-! (-> *game-info* civilians-killed) 40.0)
                    (give-random-weapon)
                )
                ((and (cpad-pressed? 0 x) (= vin-select 4) (>= vin-crystals 15))
                    (-! (-> *game-info* civilians-killed) 15.0)
                    (level-up! 1)
                )
            )
        )
    )
    (none)
)