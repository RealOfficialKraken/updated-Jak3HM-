(in-package goal)

;name: someone-fire.gc

#|
This file defines the procs for custom projectiles/processes and generally all gun mods.
It's structured this way so changes can be made all in one place.
|#


(defun someone-fire-projectile ((proj-type type) (s1-0 projectile-init-by-other-params) (proc process-tree))
    (cond
        #|((= gunmod-saucers #t) ;deprecated because it's a meme (and it eventually crashes the game), it's funny though.
            (someone-fire-yellow-3 (-> s1-0 pos) (-> s1-0 vel) (-> proc root trans))
          )|#
          ((= gunmod-fireball #t) ;fireball
            (let ((rnd (+ 0.16 (/ notoriety-level 100)))
              )
              (when (> rnd 0.75)
                (set! rnd 0.75)
              )
              (cond ((rand-vu-percent? rnd)
                (spawn-target-fireball proj-type (-> s1-0 pos) (-> s1-0 vel) 827000.0)
              )
              (else
                (spawn-projectile proj-type s1-0 proc *default-dead-pool*)
              )
              )
            )
          )
          ((= gunmod-ratshooter #t) ;rats
            (quick-rat! (-> s1-0 pos))
          )
          ((= gunmod-nukeonly #t) ;nukes
            (someone-fire-dark-3 (-> s1-0 pos) (-> s1-0 vel))
          )
          ((= gunmod-freeze #t) ;freeze
            (spawn-projectile proj-type s1-0 proc *default-dead-pool*)
          )
          (else
            (spawn-projectile proj-type s1-0 proc *default-dead-pool*)
          )
    )
    (none)
)

(defun someone-fire-red-1 ((arg0 vector) (arg1 vector))
    (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> *target* gun)))
      (let ((s5-0 (-> *part-id-table* 216)))
        (get-field-spec-by-id s5-0 (sp-field-id spt-omega))
        (let ((s5-1 (get-field-spec-by-id s5-0 (sp-field-id spt-rotate-y))))
          (if s5-1
              (set! (-> s5-1 initial-valuef) (y-angle (-> *target* control)))
              )
          )
        )
      (+! (-> *game-info* buzzer-total) 5.0)
      (launch-particles (-> *part-id-table* 216) arg0)
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (let ((v1-10 arg0))
          (let ((a0-4 arg1))
            (let ((a1-4 24576.0))
              (.mov vf7 a1-4)
              )
            (.lvf vf5 (&-> a0-4 quad))
            )
          (.lvf vf4 (&-> v1-10 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s5-2 quad) vf6)
        (set! (-> s5-2 w) 24576.0)
        (when (and (sphere-in-view-frustum? (the-as sphere s5-2))
                   (< 24576.0 (vector-vector-distance s5-2 (math-camera-pos)))
                   )
          (let ((s5-3
                  (process-spawn
                    manipy
                    :init manipy-init
                    arg0
                    (-> *target* entity)
                    (art-group-get-by-name *level* "skel-gun-red-cone" (the-as (pointer level) #f))
                    #f
                    0
                    :name "manipy"
                    :to *target*
                    :stack-size #x20000
                    )
                  )
                )
            (when s5-3
              (when (= gunmod-bigshot #t)
                (let ((veccy (new-stack-vector0)))
                  (set! (-> veccy x) 3.0)
                  (set! (-> veccy y) 3.0)
                  (set! (-> veccy z) 3.0)
                  (send-event (ppointer->process s5-3) 'scale veccy)
                )
              )
              (send-event (ppointer->process s5-3) 'anim-mode 'play1)
              (send-event (ppointer->process s5-3) 'anim "idle")
              (forward-up->quaternion (-> (the-as manipy (-> s5-3 0)) root quat) arg1 *up-vector*)
              (let ((f30-1
                      (vector-dot
                        arg1
                        (vector-! (new 'stack-no-clear 'vector) arg0 (math-camera-pos))
                        )
                      )
                    (f0-5 (vector-vector-xz-distance arg0 (math-camera-pos)))
                    )
                (when (and (< f30-1 0.0) (< f0-5 32768.0))
                  (set! (-> (the-as manipy (-> s5-3 0)) root scale z) (lerp-scale 0.2 1.0 (fabs f0-5) 20480.0 32768.0))
                  (set! (-> (the-as manipy (-> s5-3 0)) root scale x) (-> (the-as manipy (-> s5-3 0)) root scale z))
                  )
                )
              )
            )
          )
        )
      (process-spawn
        gun-red-shot
        (-> gp-0 fire-point)
        (-> gp-0 fire-dir-out)
        :name "gun-red-shot"
        :to (ppointer->process (-> gp-0 gun))
        )
      )
    )
    (none)
)

(defun someone-fire-red-2 ((arg0 vector) (arg1 vector))
  (let ((gp-0 (-> *target* gun))
        (v1-1 arg0)
        )
    (+! (-> *game-info* buzzer-total) 14.0)
    (set! (-> *last-player-pos* x) (-> *target* gun fire-point x))
    (set! (-> *last-player-pos* y) (+ 6553.6 (-> *target* control trans y)))
    (set! (-> *last-player-pos* z) (-> *target* gun fire-point z))
    (when #t
      (let ((s5-0 (new 'stack-no-clear 'gun-red-2-shockwave-init-params)))
        (set! (-> s5-0 pos quad) (-> v1-1 quad))
        (let ((v1-4 (process-spawn
                      gun-red-2-shockwave
                      s5-0
                      :name "gun-red-2-shockwave"
                      :to (ppointer->process (-> gp-0 gun))
                      :stack *kernel-dram-stack*
                      )
                    )
              )
          (set! (-> gp-0 gun 0 extra) (ppointer->handle v1-4))
          (let ((v0-0 (ppointer->handle v1-4)))
            (set! (-> *target* gun charge-active?) (the-as handle v0-0))
            v0-0
            )
          )
        )
      )
    )
  (none)
)

(defun someone-fire-red-3 ((arg0 vector) (arg1 vector))
  (local-vars
    (f1-2 float)
    (sv-16 gun-info)
    (sv-20 vector)
    (sv-24 vector)
    (sv-28 float)
    (sv-144 vector)
    (sv-148 vector)
    (sv-1952 vector)
    (sv-1968 vector)
    )
  (+! (-> *game-info* buzzer-total) 65.0)
  (set! sv-16 (-> *target* gun))
  (set! sv-20 arg1)
  (set! sv-24 arg0)
  (set! sv-28 (the-as float 266240.0))
  (draw-beam (-> *part-id-table* 217) sv-24 sv-20 #f)
  (set! (-> sv-20 y) (fmax 0.3 (-> sv-20 y)))
  (vector-normalize! sv-20 1.0)
  (let ((v1-17 (cond
                 ((logtest? (-> *part-group-id-table* 86 flags) (sp-group-flag sp13))
                  (set! (-> *launch-matrix* trans quad) (-> arg0 quad))
                  (part-tracker-spawn part-tracker-subsampler :to *entity-pool* :group (-> *part-group-id-table* 86))
                  )
                 (else
                   (set! (-> *launch-matrix* trans quad) (-> arg0 quad))
                   (part-tracker-spawn part-tracker :to *entity-pool* :group (-> *part-group-id-table* 86))
                   )
                 )
               )
        )
    (send-event (ppointer->process v1-17) 'clock *target*)
    )
  (set! sv-144 (new 'stack-no-clear 'vector))
  (let ((v1-42 (new 'stack-no-clear 'vector)))
    (set! (-> v1-42 quad) (-> sv-20 quad))
    (set! sv-148 v1-42)
    )
  (set! (-> sv-148 y) 0.0)
  (vector-normalize! sv-148 1.0)
  (vector+float*! sv-144 sv-24 sv-148 143360.0)
  (set! (-> sv-144 w) 143360.0)
  (let ((f30-0 4096000.0)
        (s5-0 #f)
        (gp-2 (the-as process-focusable #f))
        )
    (let ((a1-11 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-11 from) (process->ppointer *target*))
      (set! (-> a1-11 num-params) 0)
      (set! (-> a1-11 message) 'get-vehicle)
      (let ((s4-0 (send-event-function *target* a1-11)))
        (let ((s3-0 (new 'stack-no-clear 'array 'collide-shape 384)))
          (countdown (s2-0 (fill-actor-list-for-box *actor-hash* sv-144 s3-0 384))
            (let* ((s1-0 (-> s3-0 s2-0))
                   (v1-54 (if (type? s1-0 collide-shape)
                              s1-0
                              )
                          )
                   )
              (when v1-54
                (let* ((s0-0 (-> v1-54 process))
                       (s1-1 (if (type? s0-0 process-focusable)
                                 s0-0
                                 )
                             )
                       )
                  (when s1-1
                    (when (and (!= *target* s1-1)
                               (not (focus-test? (the-as process-focusable s1-1) disable dead inactive gun-no-target))
                               (pc-check-focus-fix (the-as process-focusable s1-1)) ;; og:preserve-this
                               (or (logtest? (process-mask crate enemy vehicle civilian) (-> s1-1 mask))
                                   (and (logtest? (process-mask guard) (-> s1-1 mask)) (-> *setting-control* user-current gun-target-guards?))
                                   )
                               (!= s4-0 s1-1)
                               )
                      (when (or (not s5-0) (logtest? (process-mask enemy guard) (-> s1-1 mask)))
                        (set! sv-1952 (new 'stack-no-clear 'vector))
                        (let ((v1-71 (-> (get-trans (the-as process-focusable s1-1) 0) quad)))
                          (set! (-> sv-1952 quad) v1-71)
                          )
                        (set! sv-1968 (vector-normalize-copy! (new 'stack-no-clear 'vector) sv-148 1.0))
                        (let ((s0-1 (new 'stack-no-clear 'vector)))
                          (let ((a1-18 s0-1)
                                (v1-72 sv-24)
                                )
                            (vector-! a1-18 sv-1952 v1-72)
                            )
                          (let ((f0-7 (vector-normalize-ret-len! s0-1 1.0)))
                            (let* ((v1-73 s0-1)
                                   ; (f1-1 (-> sv-1968 x))
                                   ; (f2-0 (-> sv-1968 y))
                                   ; (f3-0 (-> sv-1968 z))
                                   ; (f4-0 (-> v1-73 x))
                                   ; (f5-0 (-> v1-73 y))
                                   ; (f6-0 (-> v1-73 z))
                                   )
                              ;; og:preserve-this vector-dot
                              ; (.mula.s f1-1 f4-0)
                              ; (.madda.s f2-0 f5-0)
                              ; (.madd.s f1-2 f3-0 f6-0)
                              (set! f1-2 (vector-dot sv-1968 v1-73))
                              )
                            (let ((f1-3 f1-2)
                                  (v1-75 (and (not s5-0) (logtest? (process-mask enemy guard) (-> s1-1 mask))))
                                  )
                              (when (and (< 0.707 f1-3) (< (fabs (-> s0-1 y)) 28672.0) (or v1-75 (< f0-7 f30-0)))
                                (set! s5-0 v1-75)
                                (set! f30-0 f0-7)
                                (set! gp-2 (the-as process-focusable s1-1))
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        ;; og:preserve-this *snip* there was dead code here!
        )
      )
    (when gp-2
      (let ((s5-1 (new 'stack-no-clear 'vector)))
        (set! (-> s5-1 quad) (-> (get-trans gp-2 3) quad))
        (let ((f0-10 (vector-vector-xz-distance s5-1 (-> sv-16 fire-point)))
              (f1-13 (fabs (- (-> s5-1 y) (-> sv-16 fire-point y))))
              )
          0.0
          (when (< f1-13 24576.0)
            (let ((f0-14 (* 0.5 (asin (/ (* 184320.0 f0-10) (* sv-28 sv-28))))))
              (set! (-> sv-20 y) (sin f0-14))
              )
            (vector-normalize! sv-20 1.0)
            )
          )
        )
      )
    )
  (let ((a1-33 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (set! (-> a1-33 ent) (-> *target* entity))
    (set! (-> a1-33 charge) 1.0)
    (set! (-> a1-33 options) (projectile-options))
    (logclear! (-> a1-33 options) (projectile-options po14 po15 po16))
    (set! (-> a1-33 pos quad) (-> sv-24 quad))
    (set! (-> a1-33 vel quad) (-> (vector-float*! (new 'stack-no-clear 'vector) sv-20 sv-28) quad))
    (set! (-> a1-33 notify-handle) (the-as handle #f))
    (set! (-> a1-33 owner-handle) (process->handle *target*))
    (set! (-> a1-33 target-handle) (the-as handle #f))
    (set! (-> a1-33 target-pos quad) (the-as uint128 0))
    (set! (-> a1-33 ignore-handle) (process->handle *target*))
    (let* ((v1-127 *game-info*)
           (a0-100 (+ (-> v1-127 attack-id) 1))
           )
      (set! (-> v1-127 attack-id) a0-100)
      (set! (-> a1-33 attack-id) a0-100)
      )
    (set! (-> a1-33 timeout) (seconds 4))
    (the-as gun-red-3-grenade (spawn-projectile gun-red-3-grenade a1-33 *target* *default-dead-pool*))
    )
  (none)
)

(defun someone-fire-yellow-1 ((arg0 vector) (arg1 vector))
  (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (+! (-> *game-info* buzzer-total) 4.0)
    (set! (-> gp-0 ent) (-> *target* entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options po17))
    (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
    (set! (-> gp-0 pos quad) (-> arg0 quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 target-handle) (the-as handle #f))
    (set! (-> gp-0 target-pos quad) (the-as uint128 0))
    (set! (-> gp-0 ignore-handle) (process->handle (send-event *target* 'get-vehicle)))
    (let* ((v1-12 *game-info*)
           (a0-10 (+ (-> v1-12 attack-id) 1))
           )
      (set! (-> v1-12 attack-id) a0-10)
      (set! (-> gp-0 attack-id) a0-10)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) arg1 819200.0)
    (the-as
      (pointer gun-yellow-shot)
      (someone-fire-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)))
      )
    )
  (none)
)

(defun shield-shot ((proj-type string) (arg0 vector) (arg1 vector))
  (cond
    ((string= proj-type "gun-red-shot")
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-1 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-1 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-1 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
    )
    ((string= proj-type "gun-red-2-shockwave")
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-2 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-2 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-2 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
    )
    ((string= proj-type "gun-red-3-grenade")
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-3 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-3 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
      (someone-fire-red-3 arg0 arg1)
      (when (= gunmod-missles #t)
        (commando-shot! arg0 arg1)
      )
      (vector-rotate-y! arg1 arg1 (degrees 90))
    )
  )
  (none)
)

(defun commando-shot! ((arg0 vector) (arg1 vector))
    (vector-rotate-y! arg1 arg1 (degrees -30))
    (someone-fire-yellow-1 arg0 arg1)
    (vector-rotate-y! arg1 arg1 (degrees 15))
    (someone-fire-yellow-1 arg0 arg1)
    (vector-rotate-y! arg1 arg1 (degrees 15))
    (someone-fire-yellow-1 arg0 arg1)
    (vector-rotate-y! arg1 arg1 (degrees 15))
    (someone-fire-yellow-1 arg0 arg1)
    (vector-rotate-y! arg1 arg1 (degrees 15))
    (someone-fire-yellow-1 arg0 arg1)
  (none)
)